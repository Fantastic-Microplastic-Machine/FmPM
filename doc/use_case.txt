Use Case:

1. Generating microplastic descriptor data
 - User: Wants the size, color, and shape of microparticle images
 - Input: Images containing single microparticles
 - Function: Run image data through data generating functions/models
 - Results: Return table of microplastic descriptor data with file names
 
 
2. Classifying microparticles as microplastics
 - User: Wants to determine if microparticle is microplastic or not
 - Input: Images containing single microparticles and specified model iteration by filepath
 - Function: Run image data through classfier model
 - Results: Return table of classification results with file names
 
*Strech* Classifying microparticles as type of microplastic
 - User: Wants to determine if microparticle is microplastic or not and what type of microplastic it is
 - Input: Images containing single microparticles
 - Function: Run image data through classfier model
 - Results: Return table of classification results
 
 
3. Checking valid image data
 - User: Wants to feed image data to our software
 - Input: Images not of the appropriate file format
 - Function: Check images compatability with software
 - Results: If images provided are not compatable with the software, return an error. Else,run the specified operations on the images
 
 
4. Command line interface
 - User: Wants information on command line arguements
 - Input: User presents invalid command line arguements or uses keyword 'help'
 - Function: Parse and interpret command line arguements
 - Result: Print out of command line keywords and formatting
 
 
5. Build a model
 - User: Wants to construct model with different hyperparameters or *stretch* type of algorithim
 - Input: Hyperparameters and filename to save model under
 - Function: Build and save a model
 - Result: Notice of success and filepath to model 
 
 
6. Train a model(s)
 - User: Wants to train a model on image data
 - Input: Labeled microparticle images files, filepath to model, train-test-validation ratios
 - Function: Train specified model type on provided data and save
 - Results: Model performance data and updated saved model file

7. Save a model
 - User: Wants to save a model
 - Input: Filename to save as
 - Function: Use pytorch save functions to create zipfile
 - Results: Message indicating success and file path of saved model
 

 


