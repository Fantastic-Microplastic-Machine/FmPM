Use Case:
1. Classifying microparticles as microplastics
 - User: Wants to determine if microparticle is microplastic or not
 - Input: Images containing single microparticles and specified model instance
 - Function: Run image data through classfier model
 - Results: Return table of classification results with file names
 
*Strech* Classifying microparticles as type of microplastic
 - User: Wants to determine if microparticle is microplastic or not and what type of microplastic it is
 - Input: Images containing single microparticles
 - Function: Run image data through classfier model
 - Results: Return table of classification results
 
2. Build a model
 - User: Wants to construct model with different hyperparameters or *stretch* type of algorithim
 - Input: Pytorch 
 - Function: Build and save a model
 - Result: Notice of success and filepath to model 
 
3. Train a model
 - User: Wants to train a model on image data
 - Input: Labeled microparticle images files, a model, a loss function, and a optimzer
 - Function: Train specified model type on provided data
 - Results: Model performance data and model with trained weights

4. Save a model
 - User: Wants to save a model
 - Input: Filename to save as
 - Function: Use pytorch save functions to save model
 - Results: Model saved in file system
 
5. Load a model
 - User: Wants load a model
 - Input: Filename to load from
 - Function: Load model from file
 - Results: Model pulled into memory
 
6. Prepare data
 - User: Wants to convert data into form expected by functions
 - Input: CSV of labels
 - Function: Converts CSV to dataframe with appropriate columns and data
 - Results: Table of labels
 


